{"version":3,"sources":["components/Board/utils.js","components/Board/Mine.js","components/Board/Cell.js","components/Message/Message.js","components/Dropdown/Dropdown.js","components/Board/Board.js","App.js","index.js"],"names":["cellNeighbours","isValidCell","i","j","row","col","createBoard","noOfMines","board","mineLocation","subCol","push","value","clicked","x","y","initialiseBoard","minesCount","Math","floor","random","placeMines","forEach","cell","addMinesCountInBoardCells","Mine","style","display","justifyContent","alignItems","height","width","borderRadius","background","Cell","props","cellInfo","onClick","cellStyle","color","className","defaultProps","Message","text","textColor","Dropdown","label","values","onChange","initialValue","useState","selectedOption","setSelectedOption","id","e","target","map","val","idx","Board","grid","setGrid","mineLocations","setMineLocations","nonMineCellsCount","setNonMineCellsCount","solved","setSolved","startGame","setStartGame","minesForlevels","Easy","Medium","Hard","level","useRef","handleCellClick","newGrid","JSON","parse","stringify","length","revealedBoard","arr","newNonMinesCount","revealed","clickedCell","pop","revealCells","Object","keys","current","newBoard","createNewBoard","pointerEvents","opacity","rIdx","cIdx","App","rootElement","document","getElementById","ReactDOM","render"],"mappings":"2JAEMA,EAAiB,CACrB,EAAE,EAAG,GACL,EAAE,EAAG,GACL,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,GAAI,GACL,EAAE,GAAI,IAgCFC,EAAc,SAACC,EAAGC,EAAGC,EAAKC,GAC9B,OAAOH,GAAK,GAAKA,EAAIE,GAAOD,GAAK,GAAKA,EAAIE,GAkB/BC,EAAc,SAACF,EAAKC,EAAKE,GACpC,IAAMC,EAAQ,GACRC,EAAe,GAMrB,OAxDsB,SAACD,EAAOJ,EAAKC,GACnC,IAAK,IAAIH,EAAI,EAAGA,EAAIE,EAAKF,IAAK,CAE5B,IADA,IAAMQ,EAAS,GACNP,EAAI,EAAGA,EAAIE,EAAKF,IACvBO,EAAOC,KAAK,CACVC,MAAO,EACPC,SAAS,EACTC,EAAGZ,EACHa,EAAGZ,IAGPK,EAAMG,KAAKD,IAyCbM,CAAgBR,EAAOJ,EAAKC,GArCX,SAACG,EAAOJ,EAAKC,EAAKE,EAAWE,GAE9C,IADA,IAAIQ,EAAa,EACVA,EAAaV,GAAW,CAC7B,IAAIO,EAAII,KAAKC,MAAMD,KAAKE,SAAWhB,GAC/BW,EAAIG,KAAKC,MAAMD,KAAKE,SAAWf,GAET,IAAtBG,EAAMM,GAAGC,GAAGH,QACdJ,EAAMM,GAAGC,GAAGH,MAAQ,IACpBH,EAAaE,KAAK,CAACG,EAAGC,IACtBE,MA6BJI,CAAWb,EAAOJ,EAAKC,EAAKE,EAAWE,GApBP,SAACD,EAAOJ,EAAKC,GAC7C,IADsD,IAAD,WAC5CH,GACP,IAFmD,eAE1CC,GACP,GAA0B,MAAtBK,EAAMN,GAAGC,GAAGS,MAAe,iBAC/BZ,EAAesB,SAAQ,SAACC,GAEpBtB,EAAYC,EAAIqB,EAAK,GAAIpB,EAAIoB,EAAK,GAAInB,EAAKC,IACD,MAA1CG,EAAMN,EAAIqB,EAAK,IAAIpB,EAAIoB,EAAK,IAAIX,OAEhCJ,EAAMN,GAAGC,GAAGS,YAPTT,EAAI,EAAGA,EAAIE,EAAKF,IAAK,EAArBA,IADFD,EAAI,EAAGA,EAAIE,EAAKF,IAAM,EAAtBA,GAoBTsB,CAA0BhB,EAAOJ,EAAKC,GAE/B,CAAEG,QAAOC,iB,OCzCHgB,EArBF,WACX,OACE,qBACEC,MAAO,CACLC,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAJhB,SAOE,qBACEH,MAAO,CACLI,OAAQ,GACRC,MAAO,GACPC,aAAc,GACdC,WAAY,wBCRhBC,EAAO,SAACC,GACZ,IAAQC,EAAsBD,EAAtBC,SAAUC,EAAYF,EAAZE,QAEZC,EAAY,CAChBL,WAAYG,EAASvB,QACE,MAAnBuB,EAASxB,MACP,MACA,SACF,OACJ2B,MAAO,SAGT,OACE,qBACEF,QAAS,kBAAMA,EAAQD,EAAStB,EAAGsB,EAASrB,IAC5CW,MAAOY,EACPE,UAAU,YAHZ,SAKGJ,EAASvB,SAA8B,IAAnBuB,EAASxB,MACT,MAAnBwB,EAASxB,MACP,cAAC,EAAD,IAEAwB,EAASxB,MAGX,MAWRsB,EAAKO,aAAe,CAClBL,SAAU,GACVC,QAAS,cAGIH,QC3CTQ,EAAU,SAACP,GACf,IAAQQ,EAAoBR,EAApBQ,KAAMC,EAAcT,EAAdS,UACd,OAAO,mBAAGlB,MAAO,CAAEa,MAAOK,GAAnB,SAAiCD,KAQ1CD,EAAQD,aAAe,CACrBE,KAAM,GACNC,UAAW,IAGEF,QCbTG,EAAW,SAACV,GAChB,IAAQW,EAA0CX,EAA1CW,MAAOC,EAAmCZ,EAAnCY,OAAQC,EAA2Bb,EAA3Ba,SAAUC,EAAiBd,EAAjBc,aACjC,EAA4CC,mBAASD,GAArD,mBAAOE,EAAP,KAAuBC,EAAvB,KAOA,OACE,qBAAKZ,UAAU,WAAf,SACE,qCACGM,GAAS,gCAAQA,IAClB,wBAAQO,GAAG,OAAOL,SATH,SAACM,GACpBF,EAAkBE,EAAEC,OAAO3C,OAC3BoC,EAASM,EAAEC,OAAO3C,QAO4BA,MAAOuC,EAAjD,SACGJ,EAAOS,KAAI,SAACC,EAAKC,GAAN,OACV,wBAAkB9C,MAAO6C,EAAzB,SACGA,GADUC,cAiBzBb,EAASJ,aAAe,CACtBM,OAAQ,GACRC,SAAU,cAGGH,QCoDAc,EA9FD,WACZ,MAAwBT,mBAAS,IAAjC,mBAAOU,EAAP,KAAaC,EAAb,KACA,EAA0CX,mBAAS,IAAnD,mBAAOY,EAAP,KAAsBC,EAAtB,KACA,EAAkDb,mBAAS,GAA3D,mBAAOc,EAAP,KAA0BC,EAA1B,KACA,EAA4Bf,mBAAS,MAArC,mBAAOgB,EAAP,KAAeC,EAAf,KACA,EAAkCjB,oBAAS,GAA3C,mBAAOkB,EAAP,KAAkBC,EAAlB,KACMC,EAAiB,CACrBC,KAAM,GACNC,OAAQ,GACRC,KAAM,IAEFC,EAAQC,iBAAO,MAoBfC,EAAkB,SAAC9D,EAAGC,GAC1B,IAAI6C,EAAK9C,GAAGC,GAAGF,UAAWqD,EAA1B,CACA,IAAMW,EAAUC,KAAKC,MAAMD,KAAKE,UAAUpB,IAC1C,GAA4B,MAAxBiB,EAAQ/D,GAAGC,GAAGH,MAAe,CAC/B,IAAK,IAAIV,EAAI,EAAGA,EAAI4D,EAAcmB,OAAQ/E,IACxC2E,EAAQf,EAAc5D,GAAG,IAAI4D,EAAc5D,GAAG,IAAIW,SAAU,EAE9DgD,EAAQgB,GACRV,GAAU,GACVE,GAAa,OACR,CACL,IAAIa,ELsBiB,SAACC,EAAKrE,EAAGC,EAAGqE,GACrC,IAAID,EAAIrE,GAAGC,GAAGF,QAAd,CAEA,IAAIwE,EAAW,GACfA,EAAS1E,KAAKwE,EAAIrE,GAAGC,IAErB,IAN0D,iBAOxD,IAAIuE,EAAcD,EAASE,MAM3B,GAJKD,EAAYzE,UACfuE,IACAE,EAAYzE,SAAU,GAEE,IAAtByE,EAAY1E,MACd,cAGFZ,EAAesB,SAAQ,SAACC,GAEpBtB,EACEqF,EAAYxE,EAAIS,EAAK,GACrB+D,EAAYvE,EAAIQ,EAAK,GACrB4D,EAAIF,OACJE,EAAI,GAAGF,UAERE,EAAIG,EAAYxE,EAAIS,EAAK,IAAI+D,EAAYvE,EAAIQ,EAAK,IAAIV,UAEa,IAAhEsE,EAAIG,EAAYxE,EAAIS,EAAK,IAAI+D,EAAYvE,EAAIQ,EAAK,IAAIX,OACxDyE,EAAS1E,KAAKwE,EAAIG,EAAYxE,EAAIS,EAAK,IAAI+D,EAAYvE,EAAIQ,EAAK,KAElE4D,EAAIG,EAAYxE,EAAIS,EAAK,IAAI+D,EAAYvE,EAAIQ,EAAK,IAAIV,SAAU,EAChEuE,SAzBqB,IAApBC,EAASJ,QAAc,gBA8B9B,MAAO,CAAEE,MAAKC,qBK1DUI,CAAYX,EAAS/D,EAAGC,EAAGiD,GAC/CH,EAAQqB,EAAcC,KACtBlB,EAAqBiB,EAAcE,kBACI,IAAnCF,EAAcE,mBAChBjB,GAAU,GACVE,GAAa,OAKnB,OACE,sBAAK7B,UAAU,aAAf,UACE,cAAC,EAAD,CACEM,MAAM,iBACNC,OAAQ0C,OAAOC,KAAKpB,GACpBtB,SAAU,SAACS,GACTiB,EAAMiB,QAAUlC,GAElBR,aAAcqB,EAAe,KAE/B,wBAAQjC,QArCI,YARO,WACrB,IAAMpB,EAAaqD,EAAeI,EAAMiB,SAAW,QAC7CC,EAAWtF,EAAY,GAAI,GAAIW,GACrCgD,EAAqB,IAAUhD,GAC/B8C,EAAiB6B,EAASnF,cAC1BoD,EAAQ+B,EAASpF,OAIjBqF,GACA1B,GAAU,GACVE,GAAa,IAkCX,SAAsC,OAAXH,EAAkB,UAAY,WACvDE,GAAwB,OAAXF,GACb,cAAC,EAAD,CACEvB,KAAMuB,EAnDZ,2EACmB,qDAmDbtB,UAAWsB,EAAS,QAAU,SAGhCE,GAAwB,OAAXF,IACb,qBACExC,MACG0C,GAAwB,OAAXF,EAEV,GADA,CAAE4B,cAAe,OAAQC,QAAS,OAH1C,SAOGnC,EAAKJ,KAAI,SAACpD,EAAK4F,GACd,OACE,qBAAKtE,MAAO,CAAEC,QAAS,QAAvB,SACGvB,EAAIoD,KAAI,SAACnD,EAAK4F,GACb,OACE,cAAC,EAAD,CAAiB5D,QAASuC,EAAiBxC,SAAU/B,GAA1C4F,OAHqBD,YCjFrC,SAASE,IACtB,OACE,sBAAK1D,UAAU,MAAf,UACE,6CACA,cAAC,EAAD,OCHN,IAAM2D,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAAC,EAAD,MAEFJ,I","file":"static/js/main.30687208.chunk.js","sourcesContent":["// Author : Rahul Bojanapally\n\nconst cellNeighbours = [\n  [-1, 0],\n  [-1, 1],\n  [0, 1],\n  [1, 1],\n  [1, 0],\n  [1, -1],\n  [0, -1],\n  [-1, -1]\n];\n\nconst initialiseBoard = (board, row, col) => {\n  for (let i = 0; i < row; i++) {\n    const subCol = [];\n    for (let j = 0; j < col; j++) {\n      subCol.push({\n        value: 0,\n        clicked: false,\n        x: i,\n        y: j\n      });\n    }\n    board.push(subCol);\n  }\n};\n\nconst placeMines = (board, row, col, noOfMines, mineLocation) => {\n  let minesCount = 0;\n  while (minesCount < noOfMines) {\n    let x = Math.floor(Math.random() * row);\n    let y = Math.floor(Math.random() * col);\n\n    if (board[x][y].value === 0) {\n      board[x][y].value = \"M\";\n      mineLocation.push([x, y]);\n      minesCount++;\n    }\n  }\n};\n\nconst isValidCell = (i, j, row, col) => {\n  return i >= 0 && i < row && j >= 0 && j < col;\n};\n\nconst addMinesCountInBoardCells = (board, row, col) => {\n  for (let i = 0; i < row; i++) {\n    for (let j = 0; j < col; j++) {\n      if (board[i][j].value === \"M\") continue;\n      cellNeighbours.forEach((cell) => {\n        if (\n          isValidCell(i + cell[0], j + cell[1], row, col) &&\n          board[i + cell[0]][j + cell[1]].value === \"M\"\n        )\n          board[i][j].value++;\n      });\n    }\n  }\n};\n\nexport const createBoard = (row, col, noOfMines) => {\n  const board = [];\n  const mineLocation = [];\n\n  initialiseBoard(board, row, col);\n  placeMines(board, row, col, noOfMines, mineLocation);\n  addMinesCountInBoardCells(board, row, col);\n\n  return { board, mineLocation };\n};\n\nexport const revealCells = (arr, x, y, newNonMinesCount) => {\n  if (arr[x][y].clicked) return;\n\n  let revealed = [];\n  revealed.push(arr[x][y]);\n  // use BFS to reveal all neighbouring cells with value 0 & which are not clicked yet\n  while (revealed.length !== 0) {\n    let clickedCell = revealed.pop();\n\n    if (!clickedCell.clicked) {\n      newNonMinesCount--;\n      clickedCell.clicked = true;\n    }\n    if (clickedCell.value !== 0) {\n      break;\n    }\n\n    cellNeighbours.forEach((cell) => {\n      if (\n        isValidCell(\n          clickedCell.x + cell[0],\n          clickedCell.y + cell[1],\n          arr.length,\n          arr[0].length\n        ) &&\n        !arr[clickedCell.x + cell[0]][clickedCell.y + cell[1]].clicked\n      ) {\n        if (arr[clickedCell.x + cell[0]][clickedCell.y + cell[1]].value === 0)\n          revealed.push(arr[clickedCell.x + cell[0]][clickedCell.y + cell[1]]);\n\n        arr[clickedCell.x + cell[0]][clickedCell.y + cell[1]].clicked = true;\n        newNonMinesCount--;\n      }\n    });\n  }\n\n  return { arr, newNonMinesCount };\n};\n","// Author : Rahul Bojanapally\n\nimport React from \"react\";\n\n/**\n * A basic component which returns a colored circle to mimic mine in Minesweeper game\n */\nconst Mine = () => {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      }}\n    >\n      <div\n        style={{\n          height: 20,\n          width: 20,\n          borderRadius: 20,\n          background: \"rgba(0,0,0,0.5)\"\n        }}\n      ></div>\n    </div>\n  );\n};\n\nexport default Mine;\n","// Author : Rahul Bojanapally\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Mine from \"./Mine\";\nimport \"../../App.css\";\n\n/**\n * A basic component for selecting value from options in dropdwon\n * @param {object} props Component props\n * @param {object} props.cellInfo board cell object\n * @param {function} props.onClick callback handler when we click on cell\n */\nconst Cell = (props) => {\n  const { cellInfo, onClick } = props;\n\n  const cellStyle = {\n    background: cellInfo.clicked\n      ? cellInfo.value === \"M\"\n        ? \"red\"\n        : \"yellow\"\n      : \"grey\",\n    color: \"black\"\n  };\n\n  return (\n    <div\n      onClick={() => onClick(cellInfo.x, cellInfo.y)}\n      style={cellStyle}\n      className=\"cellStyle\"\n    >\n      {cellInfo.clicked && cellInfo.value !== 0 ? (\n        cellInfo.value === \"M\" ? (\n          <Mine />\n        ) : (\n          cellInfo.value\n        )\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n};\n\nCell.propTypes = {\n  cellInfo: PropTypes.object.isRequired,\n  onClick: PropTypes.func.isRequired\n};\n\nCell.defaultProps = {\n  cellInfo: {},\n  onClick: () => {}\n};\n\nexport default Cell;\n","// Author : Rahul Bojanapally\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\n/**\n * A basic component for showing simple messages\n * @param {object} props Component props\n * @param {string} props.text text that needs to be shown\n * @param {string} props.textColor color of the text\n */\nconst Message = (props) => {\n  const { text, textColor } = props;\n  return <p style={{ color: textColor }}>{text}</p>;\n};\n\nMessage.propTypes = {\n  text: PropTypes.string.isRequired,\n  textColor: PropTypes.string.isRequired\n};\n\nMessage.defaultProps = {\n  text: \"\",\n  textColor: \"\"\n};\n\nexport default Message;\n","// Author : Rahul Bojanapally\n\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\n/**\n * A basic component for selecting value from options in dropdwon\n * @param {object} props Component props\n * @param {string} props.label label to be shown for dropdown\n * @param {string} props.values list of options\n * @param {function} props.onChange callback handler when we select an option\n * @param {string} props.initialValue default value to be shown as selected\n */\nconst Dropdown = (props) => {\n  const { label, values, onChange, initialValue } = props;\n  const [selectedOption, setSelectedOption] = useState(initialValue);\n\n  const handleChange = (e) => {\n    setSelectedOption(e.target.value);\n    onChange(e.target.value);\n  };\n\n  return (\n    <div className=\"dropdown\">\n      <>\n        {label && <label>{label}</label>}\n        <select id=\"lang\" onChange={handleChange} value={selectedOption}>\n          {values.map((val, idx) => (\n            <option key={idx} value={val}>\n              {val}\n            </option>\n          ))}\n        </select>\n      </>\n    </div>\n  );\n};\n\nDropdown.propTypes = {\n  label: PropTypes.string,\n  values: PropTypes.array.isRequired,\n  initialValue: PropTypes.string,\n  onChange: PropTypes.func.isRequired\n};\n\nDropdown.defaultProps = {\n  values: [],\n  onChange: () => {}\n};\n\nexport default Dropdown;\n","// Author : Rahul Bojanapally\n\nimport React, { useRef, useState } from \"react\";\nimport { createBoard, revealCells } from \"./utils\";\nimport Cell from \"./Cell\";\nimport Message from \"../Message/Message\";\nimport Dropdown from \"../Dropdown/Dropdown\";\n\nconst Board = () => {\n  const [grid, setGrid] = useState([]);\n  const [mineLocations, setMineLocations] = useState([]);\n  const [nonMineCellsCount, setNonMineCellsCount] = useState(0);\n  const [solved, setSolved] = useState(null);\n  const [startGame, setStartGame] = useState(false);\n  const minesForlevels = {\n    Easy: 10,\n    Medium: 15,\n    Hard: 20\n  };\n  const level = useRef(null);\n\n  const SOLVED_MSG =\n    \"Congratulations, you've completed the game!! Click Restart to try again.\";\n  const LOSTGAME_MSG = \"You've lost the game!! Click Restart to try again.\";\n\n  const createNewBoard = () => {\n    const minesCount = minesForlevels[level.current || \"Easy\"];\n    const newBoard = createBoard(10, 10, minesCount);\n    setNonMineCellsCount(10 * 10 - minesCount);\n    setMineLocations(newBoard.mineLocation);\n    setGrid(newBoard.board);\n  };\n\n  const restart = () => {\n    createNewBoard();\n    setSolved(false);\n    setStartGame(true);\n  };\n\n  const handleCellClick = (x, y) => {\n    if (grid[x][y].clicked || solved) return;\n    const newGrid = JSON.parse(JSON.stringify(grid));\n    if (newGrid[x][y].value === \"M\") {\n      for (let i = 0; i < mineLocations.length; i++) {\n        newGrid[mineLocations[i][0]][mineLocations[i][1]].clicked = true;\n      }\n      setGrid(newGrid);\n      setSolved(false);\n      setStartGame(false);\n    } else {\n      let revealedBoard = revealCells(newGrid, x, y, nonMineCellsCount);\n      setGrid(revealedBoard.arr);\n      setNonMineCellsCount(revealedBoard.newNonMinesCount);\n      if (revealedBoard.newNonMinesCount === 0) {\n        setSolved(true);\n        setStartGame(false);\n      }\n    }\n  };\n\n  return (\n    <div className=\"boardClass\">\n      <Dropdown\n        label=\"Choose Level: \"\n        values={Object.keys(minesForlevels)}\n        onChange={(val) => {\n          level.current = val;\n        }}\n        initialValue={minesForlevels[0]}\n      />\n      <button onClick={restart}>{solved !== null ? \"Restart\" : \"Start\"}</button>\n      {!startGame && solved !== null && (\n        <Message\n          text={solved ? SOLVED_MSG : LOSTGAME_MSG}\n          textColor={solved ? \"green\" : \"red\"}\n        />\n      )}\n      {(startGame || solved !== null) && (\n        <div\n          style={\n            !startGame && solved !== null\n              ? { pointerEvents: \"none\", opacity: \"0.4\" }\n              : {}\n          }\n        >\n          {grid.map((row, rIdx) => {\n            return (\n              <div style={{ display: \"flex\" }} key={rIdx}>\n                {row.map((col, cIdx) => {\n                  return (\n                    <Cell key={cIdx} onClick={handleCellClick} cellInfo={col} />\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Board;\n","// Author : Rahul Bojanapally\n\nimport React from \"react\";\nimport \"./App.css\";\nimport Board from \"./components/Board/Board\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <h1>Minesweeper</h1>\n      <Board />\n    </div>\n  );\n}\n","// Author : Rahul Bojanapally\n\nimport { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}